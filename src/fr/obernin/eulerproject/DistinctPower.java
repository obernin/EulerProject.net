package fr.obernin.eulerproject;

import java.util.SortedMap;
import java.util.TreeMap;

/*
 * Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
 *
 * 22=4, 23=8, 24=16, 25=32
 * 32=9, 33=27, 34=81, 35=243
 * 42=16, 43=64, 44=256, 45=1024
 * 52=25, 53=125, 54=625, 55=3125
 *
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 *    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?
 */

public class DistinctPower {

	private int counter;
	private int amax, bmax;
	private SortedMap<Integer, int[]> smallPowers;

	public DistinctPower(int amax, int bmax) {

		this.amax = amax;
		this.bmax = bmax;
		this.smallPowers = new TreeMap<Integer, int[]>();
	}

	public int execute() {

		counter = 0;
		boolean isPower = false;

		for (int a=2; a<=amax ; a++) {
			isPower = this.smallPowers.containsKey(a);

			if (isPower)
				System.out.print(a + "! : ");
			else
				System.out.print(a + "  : ");

			for (int b=2 ; b<=bmax; b++) {

				long p = Math.round(Math.pow(a, b));

				if (isPower) {
					int[] v = this.smallPowers.get(a);
					//System.out.print(a + "^" + b + " = " + v[0] + " ^ (" + v[1] * b + ")");
					if (v[1] * b > bmax) {
						counter++;
						System.out.print(".");
					} else {
						System.out.print(" ");
					}
				} else {
					counter++;
					System.out.print(".");
				}

				if (p <= amax) {
					this.smallPowers.put((int) p, new int[] { a, b });
					//System.out.print(" ! " + p);
				}

				//System.out.println();
			}

			System.out.println(" " + counter);
		}

		return counter;
	}

	public static void main(String args[]) {

		DistinctPower sp = new DistinctPower(Integer.parseInt(args[0]), Integer.parseInt(args[1]));

		System.out.println(sp.execute());
	}
}
