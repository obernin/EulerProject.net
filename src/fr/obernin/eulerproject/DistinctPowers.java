/**
 *
 */
package fr.obernin.eulerproject;

import java.util.ArrayList;
import java.util.List;

import fr.obernin.eulerproject.prime.PrimeFactorWalker;
import fr.obernin.eulerproject.tools.Tuple;

/**
 * @author <a href="mailto:obernin@gmail.com">Olivier Bernin</a>
 *
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 *
 * 22=4, 23=8, 24=16, 25=32
 * 32=9, 33=27, 34=81, 35=243
 * 42=16, 43=64, 44=256, 45=1024
 * 52=25, 53=125, 54=625, 55=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */
public class DistinctPowers {

	private final static int START = 2;

	/**
	 *
	 */
	public static int distinctPowers(int amax, int bmax) {

		int count = 0;

		for (int a=START ; a<=amax ; a++) {

			System.out.print(a + ": ");

			// a = P(fi ^ pi) - Getting the pi (prime factors exponents)

			List<Tuple<Integer>> factors = PrimeFactorWalker.getPrimeFactorsAndExponent(a);

			List<Integer> exponents = new ArrayList<Integer>(factors.size());

			System.out.print(factors + " ");

			for (Tuple<Integer> factor : factors) {
				exponents.add(factor.get(1));
			}

			System.out.print(exponents + " ");

			// pi = D.qi - Getting biggest common divisors of the pi

			int d = PrimeFactorWalker.ppcd(exponents);

			int dupcount = 0;
			if (d != 1) {
				// a = P(fi ^ qi) ^ D - a^b = P(fi ^ gi) ^ (D * b)
				// For all D * b <= bmax, a^b is already in the list as (P(fi ^ gi) ^ D) ^ b

				dupcount = (int) Math.floor(bmax / d) - (START - 1);
			}
			count += bmax - (START - 1) - dupcount;

			System.out.println("(" + d + ") -> (" + dupcount + ") " + count);
		}

		return count;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		distinctPowers(Integer.parseInt(args[0]), Integer.parseInt(args[1]));
	}

}
